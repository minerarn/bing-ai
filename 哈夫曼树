import java.util.PriorityQueue;
import java.util.Comparator;

// 定义哈夫曼树的节点
class Node {
    int weight; // 节点的权重
    Node left, right; // 左右子节点

    public Node(int weight) {
        this.weight = weight;
        left = null;
        right = null;
    }
}

public class HuffmanTree {
    // 构造哈夫曼树
    public static Node buildHuffmanTree(int[] weights) {
        // 使用优先队列（最小堆）
        PriorityQueue<Node> pq = new PriorityQueue<>(Comparator.comparingInt(n -> n.weight));
        
        // 将所有权重放入优先队列
        for (int w : weights) {
            pq.add(new Node(w));
        }
        
        // 不断从队列中取出两个最小的节点，创建新的父节点，再放回队列
        while (pq.size() > 1) {
            Node left = pq.poll();
            Node right = pq.poll();
            
            Node parent = new Node(left.weight + right.weight);
            parent.left = left;
            parent.right = right;
            
            pq.add(parent);
        }
        
        // 返回哈夫曼树的根节点
        return pq.poll();
    }

    // 先序遍历
    public static void preorderTraversal(Node node) {
        if (node == null) {
            return;
        }
        System.out.println(node.weight); // 访问当前节点
        preorderTraversal(node.left); // 遍历左子树
        preorderTraversal(node.right); // 遍历右子树
    }

    public static void main(String[] args) {
        int[] weights = {2, 3, 7, 9, 18, 25};
        Node root = buildHuffmanTree(weights);
        preorderTraversal(root);
    }
}