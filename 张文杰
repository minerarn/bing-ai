#include <stdio.h>
#include <stdlib.h>

// 定义哈夫曼树节点
typedef struct huffman_node {
    int weight;
    struct huffman_node *left, *right;
} huffman_node;

// 比较函数，用于qsort
int compare(const void *a, const void *b) {
    return (*(int*)a - *(int*)b);
}

// 创建新节点
huffman_node* create_node(int weight) {
    huffman_node* node = (huffman_node*)malloc(sizeof(huffman_node));
    node->weight = weight;
    node->left = node->right = NULL;
    return node;
}

// 合并两个节点为一个新节点
huffman_node* merge_nodes(huffman_node* left, huffman_node* right) {
    huffman_node* node = create_node(left->weight + right->weight);
    node->left = left;
    node->right = right;
    return node;
}

// 先序遍历打印哈夫曼树
void preorder(huffman_node* node) {
    if (node == NULL) return;
    printf("%d\n", node->weight); // 打印当前节点
    preorder(node->left);  // 先序遍历左子树
    preorder(node->right); // 先序遍历右子树
}

int main() {
    int weights[] = {2, 3, 7, 9, 18, 25};
    int n = sizeof(weights) / sizeof(weights[0]);

    // 对权重进行排序
    qsort(weights, n, sizeof(int), compare);

    // 构造哈夫曼树
    while (n > 1) {
        // 取出两个最小权重的节点
        huffman_node *left = create_node(weights[0]);
        huffman_node *right = create_node(weights[1]);

        // 合并这两个节点
        huffman_node *new_node = merge_nodes(left, right);

        // 更新权重数组：移除已用的两个权重，添加新节点的权重
        for (int i = 2; i < n; ++i) {
            weights[i-2] = weights[i];
        }
        weights[n-2] = new_node->weight;
        --n;

        // 重新排序
        qsort(weights, n, sizeof(int), compare);
    }

    // 剩下的最后一个元素就是根节点的权重
    huffman_node* root = create_node(weights[0]);

    // 先序遍历打印
    preorder(root);

    // 清理内存
    // 这里省略了清理内存的代码，实际应用中应当释放所有动态分配的内存

    return 0;
}